package main

import (
	"log"
	"net/http"
	"os"
	"path/filepath"

	"rutube-downloader/internal/handler"
)

func main() {
	// –ü—Ä–æ–≤–µ—Ä–∫–∞: –º–æ–∂–Ω–æ –ª–∏ –Ω–∞–π—Ç–∏ —à–∞–±–ª–æ–Ω –∏–∑ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
	if !templateExists("internal/templates/index.html") {
		projectRoot := getProjectRoot()
		if err := os.Chdir(projectRoot); err != nil {
			log.Fatalf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å os.Chdir: %v", err)
		}
		log.Println("üìÅ –ê–≤—Ç–æ-–ø–µ—Ä–µ—Ö–æ–¥ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é:", projectRoot)
	}

	// –†–æ—É—Ç–∏–Ω–≥
	http.HandleFunc("/", handler.IndexHandler)
	http.HandleFunc("/download", handler.DownloadHandler)

	// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
	http.Handle("/static/", http.StripPrefix("/static/", http.FileServer(http.Dir("static"))))
	http.Handle("/downloads/", http.StripPrefix("/downloads/", http.FileServer(http.Dir("downloads"))))

	// –ó–∞–ø—É—Å–∫ HTTP-—Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞ —Å 80 –Ω–∞ 443
	go func() {
		log.Fatal(http.ListenAndServe(":80", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
			target := "https://" + r.Host + r.URL.RequestURI()
			http.Redirect(w, r, target, http.StatusMovedPermanently)
		})))
	}()

	// –ó–∞–ø—É—Å–∫ HTTPS-—Å–µ—Ä–≤–µ—Ä–∞
	log.Println("üöÄ Server running on https://vidpull.ru")
	err := http.ListenAndServeTLS(":443", "/etc/ssl/vidpull.crt", "/etc/ssl/vidpull.key", nil)
	if err != nil {
		log.Fatalf("‚ùå ListenAndServe error: %v", err)
	}
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —à–∞–±–ª–æ–Ω–∞
func templateExists(path string) bool {
	_, err := os.Stat(path)
	return err == nil
}

// –ö–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è Chdir (–∏–∑ /cmd/server ‚Üí ../../)
func getProjectRoot() string {
	exePath, err := os.Executable()
	if err != nil {
		log.Fatalf("‚ùå os.Executable failed: %v", err)
	}
	return filepath.Clean(filepath.Join(filepath.Dir(exePath), "..", ".."))
}
