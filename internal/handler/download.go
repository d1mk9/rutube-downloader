package handler

import (
	"crypto/rand"
	"encoding/hex"
	"html/template"
	"log"
	"net/http"
	"strings"
	"time"

	"rutube-downloader/internal/parser"
)

type ResultPageData struct {
	Error       string
	OriginalURL string
	VideoLink   string
	JobID       string
}

func newID() string {
	b := make([]byte, 16)
	if _, err := rand.Read(b); err != nil {
		// –Ω–∞ –∫—Ä–∞–π–Ω–∏–π —Å–ª—É—á–∞–π ‚Äî timestamp
		return time.Now().Format("20060102T150405.000000000")
	}
	return hex.EncodeToString(b)
}

func DownloadHandler(w http.ResponseWriter, r *http.Request) {
	if r.Method != http.MethodPost {
		http.Redirect(w, r, "/", http.StatusSeeOther)
		return
	}

	log.Printf("üì© METHOD: %s", r.Method)
	url := strings.TrimSpace(r.FormValue("url"))
	log.Printf("üåê –ü–æ–ª—É—á–µ–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞: '%s'", url)

	if !strings.Contains(url, "rutube.ru") {
		renderError(w, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ RuTube")
		return
	}

	// –°–æ–∑–¥–∞—ë–º –∑–∞–¥–∞—á—É –∏ —Å—Ä–∞–∑—É –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º.
	jobID := newID()
	job := &Job{
		ID:        jobID,
		CreatedAt: time.Now(),
		Status:    JobQueued,
		Percent:   0,
	}
	jobsMu.Lock()
	jobs[jobID] = job
	jobsMu.Unlock()

	// –§–æ–Ω–æ–≤–∞—è –≥–æ—Ä—É—Ç–∏–Ω–∞: –ø–∞—Ä—Å–∏–Ω–≥ + ffmpeg
	go func(jobID, videoURL string) {
		setJob(jobID, func(j *Job) {
			j.Status = JobRunning
			j.Percent = 0
		})

		// ExtractMP4WithProgress –æ—Ç–¥–∞—ë—Ç –∏–º—è —Ñ–∞–π–ª–∞ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç—ã —á–µ—Ä–µ–∑ callback
		fileName, err := parser.ExtractMP4WithProgress(videoURL, func(done, total float64) {
			// total –º–æ–∂–µ—Ç –±—ã—Ç—å 0 –≤ –Ω–∞—á–∞–ª–µ ‚Äî –∑–∞—â–∏—â–∞–µ–º—Å—è
			if total > 0 {
				p := (done / total) * 100
				if p > 100 {
					p = 100
				}
				setJob(jobID, func(j *Job) { j.Percent = p })
			}
		})

		if err != nil || fileName == "" {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ RuTube: %v", err)
			setJob(jobID, func(j *Job) {
				j.Status = JobError
				j.ErrorText = "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –≤–∏–¥–µ–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
			})
			return
		}

		setJob(jobID, func(j *Job) {
			j.Status = JobDone
			j.Percent = 100
			j.FileName = fileName
		})
	}(jobID, url)

	// –†–µ–Ω–¥–µ—Ä–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º –∏ –∞–≤—Ç–æ-–ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–æ–π —Å—Å—ã–ª–∫–∏ –ø–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
	tmpl, err := template.ParseFiles("internal/templates/result.html")
	if err != nil {
		http.Error(w, "–û—à–∏–±–∫–∞ —à–∞–±–ª–æ–Ω–∞", http.StatusInternalServerError)
		return
	}
	data := ResultPageData{
		Error:       "",
		OriginalURL: url,
		VideoLink:   "", // –ø–æ—è–≤–∏—Ç—Å—è, –∫–æ–≥–¥–∞ –∑–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è
		JobID:       jobID,
	}
	if err := tmpl.Execute(w, data); err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏—Å–æ–≤–∫–µ —à–∞–±–ª–æ–Ω–∞: %v", err)
	}
}

func renderError(w http.ResponseWriter, message string) {
	tmpl, err := template.ParseFiles("internal/templates/result.html")
	if err != nil {
		http.Error(w, "–û—à–∏–±–∫–∞ —à–∞–±–ª–æ–Ω–∞", http.StatusInternalServerError)
		return
	}
	data := ResultPageData{
		Error:       message,
		OriginalURL: "",
		VideoLink:   "",
		JobID:       "",
	}
	if err := tmpl.Execute(w, data); err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏—Å–æ–≤–∫–µ –æ—à–∏–±–∫–∏: %v", err)
	}
}
